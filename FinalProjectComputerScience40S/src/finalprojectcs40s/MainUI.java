/** Required package class namespace */
package finalprojectcs40s;

/** Required API imports */
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import tools.Numbers;


/*
 * MainUI - the user interface for this simulation
 * 
 * @author Michelle Galinsky
 * @since May 16, 2024
 */
public class MainUI extends javax.swing.JFrame {

    // <editor-fold defaultstate="collapsed" desc="NetBeans Visual Editor Generated Code">  
    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusLabel = new javax.swing.JLabel();
        gamePanel = new javax.swing.JPanel();
        heroLabel = new javax.swing.JLabel();
        fighterButton = new javax.swing.JButton();
        wizardButton = new javax.swing.JButton();
        superheroButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(null);

        statusLabel.setText("Status:");
        getContentPane().add(statusLabel);
        statusLabel.setBounds(10, 10, 477, 30);

        gamePanel.setBackground(new java.awt.Color(255, 255, 255));
        gamePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gamePanel.setPreferredSize(new java.awt.Dimension(400, 400));
        gamePanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                gamePanelKeyPressed(evt);
            }
        });
        gamePanel.setLayout(null);

        heroLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        heroLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heroLabel.setText("HERO");
        heroLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gamePanel.add(heroLabel);
        heroLabel.setBounds(553, 296, 80, 50);

        getContentPane().add(gamePanel);
        gamePanel.setBounds(10, 46, 1155, 722);

        fighterButton.setText("Fighter");
        fighterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fighterButtonActionPerformed(evt);
            }
        });
        getContentPane().add(fighterButton);
        fighterButton.setBounds(720, 10, 110, 30);

        wizardButton.setText("Wizard");
        wizardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wizardButtonActionPerformed(evt);
            }
        });
        getContentPane().add(wizardButton);
        wizardButton.setBounds(830, 10, 110, 30);

        superheroButton.setText("Superhero");
        superheroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                superheroButtonActionPerformed(evt);
            }
        });
        getContentPane().add(superheroButton);
        superheroButton.setBounds(940, 10, 110, 30);

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        getContentPane().add(exitButton);
        exitButton.setBounds(1050, 10, 110, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gamePanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_gamePanelKeyPressed
        keyPress(evt);
    }//GEN-LAST:event_gamePanelKeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        keyPress(evt);
    }//GEN-LAST:event_formKeyPressed

    private void fighterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fighterButtonActionPerformed
        fighter();
    }//GEN-LAST:event_fighterButtonActionPerformed

    private void wizardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wizardButtonActionPerformed
        wizard();
    }//GEN-LAST:event_wizardButtonActionPerformed

    private void superheroButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_superheroButtonActionPerformed
        superhero();
    }//GEN-LAST:event_superheroButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        quit();
    }//GEN-LAST:event_exitButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JButton fighterButton;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JLabel heroLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton superheroButton;
    private javax.swing.JButton wizardButton;
    // End of variables declaration//GEN-END:variables

    // </editor-fold> 
    
    public Timer fighterTimer;                    // Fighter fighterTimer
    public Timer wizardTimer;                   // Wizard fighterTimer
    public Timer superheroTimer;                   // Superhero fighterTimer
    public Hero hero;              // The Hero object for the simulation
    public static boolean f;
    public static boolean w;
    public static boolean s;
    
    public int fighterTime = 0;
    public int wizardTime = 0;
    public int superheroTime = 0;
    
    public static boolean isFighterMode;
    public static boolean isSuperheroMode;
    
    
    
    /**
     * Form startup and initialize needed data structures
     */
    public void initialize() {
        hero = new Hero(heroLabel, gamePanel);          // Instantiate Hero
        // Create array of user choices
        final String[] CHOICES = {
            "Fighter with the properties: "   + hero.fighter(),
            "Wizard with the properties: "    + hero.wizard(),
            "Superhero with the properties: " + hero.superhero()
        };
        // Get choice from user
        String choice = Controller.input(CHOICES);
        // Respond to user choice
        if (choice.equals(CHOICES[0])) {
            setButtons(0);
            hero.fighter();
        } else if (choice.equals(CHOICES[1])) {
            setButtons(1);
            hero.wizard();
        } else {
            setButtons(2);
            hero.superhero();
        }
        
        Hero.health = 0;
        hero.health = 0;
        EnemyGenerator.screenCount = 0;
        updateStatus();
        
        // Setup enemy generator
        EnemyGenerator.panel = gamePanel;               // Associate the enemy
        EnemyGenerator.hero = hero;                     // generator with hero,
        EnemyGenerator.statusLabel = statusLabel;       // panel, and label
        EnemyGenerator.start();                         // Start generator
        // Build timer for fighter
        fighterTimer = new Timer(1000, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                fighterTimerAction();                   // fighter timer action
            }
        });
        // Build timer for wizard
        wizardTimer = new Timer(1000, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                wizardTimerAction();                   // wizard timer action
            }
        });
        // Build timer for superhero
        superheroTimer = new Timer(1000, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                superheroTimerAction();               // superhero timer action
            }
        });
        // Continue from setup
        this.setResizable(false);                       // Form not sizable
        this.setSize(1190, 820);
        this.setLocationRelativeTo(null);               // Center form on screen
        this.setVisible(true);                          // Display form to user
        Controller.mainUI.gamePanel.requestFocus();     // Remove button focus
    }

    /**
     * The action for the fighter timer
     */
    private void fighterTimerAction() { 
        fighterTime++;        
        if (fighterTime < 10) {
            isFighterMode = true;
            updateStatus();
        }
        else {
            isFighterMode = false;
            fighterTime = 0;
            fighterButton.setEnabled(true);
            fighterTimer.stop();
            heroLabel.setText("HERO");
        }
        if (checkWin()) {
            quit();
        }
    }

    /**
     * The action for the wizard timer
     */
    private void wizardTimerAction() { 
        wizardTime++;
        if (wizardTime < 2) {
            hero.health += 30;
            updateStatus(); 
        }
        else {
            wizardTime = 0;
            wizardButton.setEnabled(true);
            heroLabel.setVisible(true);
            wizardTimer.stop();
            heroLabel.setText("HERO");
        }
        if(checkWin()){
            quit();
        }
    }
    
    /**
     * The action for the superhero timer
     */
    private void superheroTimerAction() { 
        superheroTime++;
        if (superheroTime < 10) {
            isSuperheroMode = true;
            updateStatus();
        }
        else {
            isSuperheroMode = false;
            superheroTime = 0;
            superheroButton.setEnabled(true);
            heroLabel.setVisible(true);
            superheroTimer.stop();
            heroLabel.setText("HERO");
        }
        if (checkWin()) {
            quit();
        }
    }
    
    /**
     * Initializes which button to enable and which to disable
     *
     * @param num the number of the button to activate (determined from the
     * array in FinalProject for which hero the user chose)
     */
    public void setButtons(int num) {
        if (num == 0) {
            fighterButton.setEnabled(true);
            wizardButton.setEnabled(false);
            superheroButton.setEnabled(false);
            f = true;
            w = false;
            s = false;
        } else if (num == 1) {
            fighterButton.setEnabled(false);
            wizardButton.setEnabled(true);
            superheroButton.setEnabled(false);
            f = false;
            w = true;
            s = false;
        } else {
            fighterButton.setEnabled(false);
            wizardButton.setEnabled(false);
            superheroButton.setEnabled(true);
            f = false;
            w = false;
            s = true;
        }
    }

    /**
     * the keyboard event for this form by the user
     *
     * @param event the specific key that fired this event
     */
    private void keyPress(KeyEvent event) {
        if (event.getKeyCode() == KeyEvent.VK_F && f == true) {
            fighter();
        } else if (event.getKeyCode() == KeyEvent.VK_W && w == true) {
            wizard();
        } else if (event.getKeyCode() == KeyEvent.VK_S && s == true) {
            superhero();
        } else if (event.getKeyCode() == KeyEvent.VK_Q) {
            quit();
        } else {
            hero.keypress(event);       // Pass on to the hero
        }
    }

    /**
     * The actions of the hero fighter
     */
    private void fighter() {
        fighterButton.setEnabled(false);
        heroLabel.setText("FIGHTER");
        fighterTimer.start();
        Controller.mainUI.gamePanel.requestFocus();
    }

    /**
     * The actions of the hero wizard
     */
    private void wizard() {
        //Hero dissapears and appears somewhere on the screen, health +15
        disappear();
        heroLabel.setText("WIZARD");
        wizardTimer.start();
        wizardButton.setEnabled(false);
        Controller.mainUI.gamePanel.requestFocus();
    }

    /**
     * The actions of the hero superhero
     */
    private void superhero() {
        //Becomes invisible to enemy but user can see, health +15
        superheroTimer.start();
        heroLabel.setText("SUPERHERO");
        superheroButton.setEnabled(false);
        Controller.mainUI.gamePanel.requestFocus();
    }

    /**
     * Asks the user if they would like to play again
     *
     * @return true (yes), or false (no)
     */
    private static boolean playAgain() {
        int answer = JOptionPane.showConfirmDialog(
                null, "Do you want to play again?", Controller.title,
                JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (answer == JOptionPane.YES_OPTION) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Asks the user if they would like to play again, then restarts the program
     * or exits the application
     */
    public void quit() {
        fighterTimer.stop();
        wizardTimer.stop();
        superheroTimer.stop();
        Hero.health = 0;
        hero.health = 0;
        EnemyGenerator.screenCount = 0;
        updateStatus();
        Controller.mainUI.dispose();
        if (playAgain() == true) {
            Controller.mainUI = new MainUI();           // Build main UI
            Controller.mainUI.initialize();             // Show main UI
            //Controller controller = new Controller();
        } 
        else {
            System.exit(0);
        }
    }

    /**
     * Checks to see if the user won
     *
     * @return true (they won), or false (they haven't won yet)
     */
    public boolean checkWin() {
        if (hero.health >= 100) {
            JOptionPane.showMessageDialog(null, "You Won!",
                    Controller.title, JOptionPane.PLAIN_MESSAGE);
            return true;
        } else {
            return false;
        }
    }
    
    /**
     * Sets the text of the status and health in the label
     */
    public void updateStatus() {
        statusLabel.setText("Status: Enemies on screen = " + EnemyGenerator.screenCount
                + "\n Health of Hero = " + hero.health);
    }
  
    /**
     * The hero disappears and appears somewhere else on the screen (only when
     * the wizard button is pressed)
     */
    private void disappear() {
        int x = Numbers.random(1, gamePanel.getWidth() - EnemyGenerator.SIZE - 1);
        int y = Numbers.random(1, gamePanel.getHeight() - EnemyGenerator.SIZE - 1);
        int w = heroLabel.getWidth();
        int h = heroLabel.getHeight();
        heroLabel.setBounds(x, y, w, h);
        heroLabel.setVisible(false);
        hero.update();
    }

}
